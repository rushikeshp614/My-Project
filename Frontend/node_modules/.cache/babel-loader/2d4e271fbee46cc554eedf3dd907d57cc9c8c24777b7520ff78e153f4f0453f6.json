{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rushi\\\\OneDrive\\\\Desktop\\\\Project\\\\my-app\\\\src\\\\components\\\\CodingScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport NavBar from \"./NavBar\";\nimport NavBarCoding from \"./NavBarCoding\";\nimport NextSampleButton from \"./NextSampleButton\";\nimport exerciseTemplates from \"./Templates\";\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodingScreen() {\n  _s();\n  const [userCode, setUserCode] = useState(``);\n\n  // State variable to set editors default language\n  const [userLang, setUserLang] = useState(\"python\");\n\n  // State variable to set editors default theme\n  const [userTheme, setUserTheme] = useState(\"github\");\n\n  // State variable to set editors default font size\n  const [fontSize, setFontSize] = useState(20);\n\n  // State variable to set users input\n  const [userInput, setUserInput] = useState(\"\");\n\n  // State variable to set users output\n  const [userOutput, setUserOutput] = useState(\"\");\n\n  // Loading state variable to show spinner\n  // while fetching data\n  const [loading, setLoading] = useState(false);\n  function handleChange(value) {\n    setUserCode(value);\n  }\n  function compile() {\n    setLoading(true);\n    if (userCode === ``) {\n      return;\n    }\n\n    // Post request to compile endpoint\n    axios.post(`http://localhost:3000/compile`, {\n      code: userCode,\n      language: userLang,\n      input: userInput\n    }).then(res => {\n      setUserOutput(res.data.output);\n    }).then(() => {\n      setLoading(false);\n    });\n  }\n\n  // Function to clear the output screen\n  function clearOutput() {\n    setUserOutput(\"\");\n  }\n  const [randomQuestionData, setRandomQuestionData] = useState({\n    question: \"\",\n    key: null,\n    usedVariables: {}\n  });\n  const [sampleSolution, setSampleSolution] = useState(\"\");\n  const getRandomItem = array => array[Math.floor(Math.random() * array.length)];\n  const generateRandomQuestion = () => {\n    const randomTemplate = getRandomItem(loopExerciseTemplate.questions);\n    const usedVariables = {};\n    let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\n      if (variables.hasOwnProperty(variable)) {\n        let variableValue = getRandomItem(variables[variable]);\n        usedVariables[variable] = variableValue;\n        return variableValue;\n      }\n      return match;\n    });\n    setRandomQuestionData({\n      question,\n      usedVariables,\n      key: randomTemplate.key\n    });\n  };\n  const handleGenerateSampleSolution = () => {\n    const {\n      key,\n      usedVariables\n    } = randomQuestionData;\n    const matchingSolution = solutions.find(solution => solution.key === key);\n    if (matchingSolution) {\n      let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n        if (usedVariables.hasOwnProperty(variable)) {\n          return usedVariables[variable];\n        }\n        return match;\n      });\n      setSampleSolution(solutionCode);\n    } else {\n      setSampleSolution(\"Sample solution not available for this question.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codingScreenBody\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Python Loops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: randomQuestionData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavBarCoding, {\n        userLang: userLang,\n        setUserLang: setUserLang,\n        userTheme: userTheme,\n        setUserTheme: setUserTheme,\n        fontSize: fontSize,\n        setFontSize: setFontSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-output-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code-editor\",\n          id: \"editor\",\n          children: /*#__PURE__*/_jsxDEV(AceEditor, {\n            mode: userLang,\n            theme: userTheme,\n            name: \"my-editor\",\n            width: \"100%\",\n            height: \"800px\",\n            fontSize: `${fontSize}px`,\n            editorProps: {\n              $blockScrolling: true\n            },\n            showPrintMargin: true,\n            showGutter: true,\n            highlightActiveLine: true,\n            onChange: handleChange,\n            setOptions: {\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              enableSnippets: true,\n              showLineNumbers: true,\n              tabSize: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-output-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"input:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-box\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"code-input\",\n              onChange: e => setUserInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"output:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-box\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./images/loading.gif\",\n              alt: \"loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"output-box\",\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              style: {\n                color: \"white\"\n              },\n              children: userOutput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(NextSampleButton, {\n          classNameNext: \"nextButton\",\n          classNameSample: \"sampleSolutionButton\",\n          onClickQuestion: generateRandomQuestion,\n          onClickSmaple: handleGenerateSampleSolution\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"codeButton\",\n          onClick: () => compile(),\n          children: \"Run\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clearButton\",\n          onClick: () => {\n            clearOutput();\n          },\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n_s(CodingScreen, \"ObSp6xYuNRRuDT3ZGFf8A7rHiTI=\");\n_c = CodingScreen;\nexport default CodingScreen;\nvar _c;\n$RefreshReg$(_c, \"CodingScreen\");","map":{"version":3,"names":["React","useEffect","NavBar","NavBarCoding","NextSampleButton","exerciseTemplates","AceEditor","useState","axios","jsxDEV","_jsxDEV","CodingScreen","_s","userCode","setUserCode","userLang","setUserLang","userTheme","setUserTheme","fontSize","setFontSize","userInput","setUserInput","userOutput","setUserOutput","loading","setLoading","handleChange","value","compile","post","code","language","input","then","res","data","output","clearOutput","randomQuestionData","setRandomQuestionData","question","key","usedVariables","sampleSolution","setSampleSolution","getRandomItem","array","Math","floor","random","length","generateRandomQuestion","randomTemplate","loopExerciseTemplate","questions","text","replace","match","variable","variables","hasOwnProperty","variableValue","handleGenerateSampleSolution","matchingSolution","solutions","find","solution","solutionCode","template","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","mode","theme","name","width","height","editorProps","$blockScrolling","showPrintMargin","showGutter","highlightActiveLine","onChange","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","e","target","src","alt","style","color","classNameNext","classNameSample","onClickQuestion","onClickSmaple","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rushi/OneDrive/Desktop/Project/my-app/src/components/CodingScreen.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport NavBar from \"./NavBar\";\r\nimport NavBarCoding from \"./NavBarCoding\";\r\nimport NextSampleButton from \"./NextSampleButton\";\r\nimport exerciseTemplates from \"./Templates\";\r\nimport AceEditor from 'react-ace';\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/tomorrow';\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction CodingScreen() {\r\n\r\n    const [userCode, setUserCode] = useState(``);\r\n\r\n    // State variable to set editors default language\r\n    const [userLang, setUserLang] = useState(\"python\");\r\n\r\n    // State variable to set editors default theme\r\n    const [userTheme, setUserTheme] = useState(\"github\");\r\n\r\n    // State variable to set editors default font size\r\n    const [fontSize, setFontSize] = useState(20);\r\n\r\n    // State variable to set users input\r\n    const [userInput, setUserInput] = useState(\"\");\r\n\r\n    // State variable to set users output\r\n    const [userOutput, setUserOutput] = useState(\"\");\r\n\r\n    // Loading state variable to show spinner\r\n    // while fetching data\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n\r\n    function handleChange(value) {\r\n        setUserCode(value)\r\n    }\r\n\r\n\r\n    function compile() {\r\n        setLoading(true);\r\n        if (userCode === ``) {\r\n            return\r\n        }\r\n\r\n        // Post request to compile endpoint\r\n        axios.post(`http://localhost:3000/compile`, {\r\n            code: userCode,\r\n            language: userLang,\r\n            input: userInput\r\n        }).then((res) => {\r\n            setUserOutput(res.data.output);\r\n\r\n        }).then(() => {\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    // Function to clear the output screen\r\n    function clearOutput() {\r\n        setUserOutput(\"\");\r\n    }\r\n\r\n    const [randomQuestionData, setRandomQuestionData] = useState({\r\n        question: \"\",\r\n        key: null,\r\n        usedVariables: {},\r\n    });\r\n\r\n    const [sampleSolution, setSampleSolution] = useState(\"\");\r\n\r\n    const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    const generateRandomQuestion = () => {\r\n        const randomTemplate = getRandomItem(loopExerciseTemplate.questions);\r\n        const usedVariables = {};\r\n\r\n        let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\r\n            if (variables.hasOwnProperty(variable)) {\r\n                let variableValue = getRandomItem(variables[variable]);\r\n                usedVariables[variable] = variableValue;\r\n                return variableValue;\r\n            }\r\n            return match;\r\n        });\r\n\r\n        setRandomQuestionData({ question, usedVariables, key: randomTemplate.key });\r\n    };\r\n\r\n    const handleGenerateSampleSolution = () => {\r\n        const { key, usedVariables } = randomQuestionData;\r\n        const matchingSolution = solutions.find((solution) => solution.key === key);\r\n\r\n        if (matchingSolution) {\r\n            let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n                if (usedVariables.hasOwnProperty(variable)) {\r\n                    return usedVariables[variable];\r\n                }\r\n                return match;\r\n            });\r\n\r\n            setSampleSolution(solutionCode);\r\n        } else {\r\n            setSampleSolution(\"Sample solution not available for this question.\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"codingScreenBody\">\r\n            <NavBar />\r\n            <div className=\"header\">\r\n                <h1>Python Loops</h1>\r\n            </div>\r\n            <div className=\"container\">\r\n                <div className=\"question\">\r\n                    <h2>{randomQuestionData}</h2>\r\n                </div>\r\n                <NavBarCoding\r\n                    userLang={userLang} setUserLang={setUserLang}\r\n                    userTheme={userTheme} setUserTheme={setUserTheme}\r\n                    fontSize={fontSize} setFontSize={setFontSize}\r\n                />\r\n\r\n                <div className=\"editor-output-container\">\r\n                    <div className=\"code-editor\" id=\"editor\">\r\n                        <AceEditor\r\n                            mode={userLang}\r\n                            theme={userTheme}\r\n                            name=\"my-editor\"\r\n                            width=\"100%\"\r\n                            height=\"800px\"\r\n                            fontSize={`${fontSize}px`}\r\n                            editorProps={{ $blockScrolling: true }}\r\n                            showPrintMargin={true}\r\n                            showGutter={true}\r\n                            highlightActiveLine={true}\r\n                            onChange={handleChange}\r\n                            setOptions={{\r\n                                enableBasicAutocompletion: true,\r\n                                enableLiveAutocompletion: true,\r\n                                enableSnippets: true,\r\n                                showLineNumbers: true,\r\n                                tabSize: 2,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-output-area\">\r\n                        <h4>input:</h4>\r\n                        <div className=\"input-box\">\r\n                            <textarea id=\"code-input\"\r\n                                onChange={(e) => setUserInput(e.target.value)}>\r\n                            </textarea>\r\n\r\n                        </div>\r\n                        <h4>output:</h4>\r\n                        {loading ? (\r\n                            <div className=\"spinner-box\">\r\n                                <img src=\"./images/loading.gif\" alt=\"loading...\" />\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"output-box\">\r\n                                <pre style={{ color: \"white\" }}>{userOutput}</pre>\r\n\r\n                            </div>\r\n                        )}\r\n                        <div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"button-container\">\r\n                    <NextSampleButton \r\n                        classNameNext=\"nextButton\"\r\n                        classNameSample=\"sampleSolutionButton\"\r\n                        onClickQuestion={generateRandomQuestion}\r\n                        onClickSmaple={handleGenerateSampleSolution}\r\n                    />\r\n\r\n                    <button type=\"submit\" className=\"codeButton\" onClick={() => compile()}>Run</button>\r\n                    <button className=\"clearButton\" onClick={() => { clearOutput() }}>Clear</button>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CodingScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}