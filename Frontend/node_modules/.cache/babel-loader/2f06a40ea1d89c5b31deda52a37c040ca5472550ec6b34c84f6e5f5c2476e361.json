{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rushi\\\\OneDrive\\\\Desktop\\\\Project\\\\my-app\\\\src\\\\components\\\\CodingScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport NavBarCoding from \"./NavBarCoding\";\nimport NextSampleButton from \"./NextSampleButton\";\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\nimport { useState } from \"react\";\nimport loopExerciseTemplate from \"./Templates\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodingScreen() {\n  _s();\n  // const { exerciseType } = useParams();\n\n  const [userCode, setUserCode] = useState(``);\n  const [userLang, setUserLang] = useState(\"python\");\n  const [userTheme, setUserTheme] = useState(\"github\");\n  const [fontSize, setFontSize] = useState(20);\n  const [userInput, setUserInput] = useState(\"\");\n  const [userOutput, setUserOutput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  function handleChange(value) {\n    setUserCode(value);\n  }\n  function compile() {\n    setLoading(true);\n    if (userCode === ``) {\n      return;\n    }\n\n    // Post request to compile endpoint\n    axios.post(`http://localhost:3000/compile`, {\n      code: userCode,\n      language: userLang,\n      input: userInput\n    }).then(res => {\n      setUserOutput(res.data.output);\n    }).then(() => {\n      setLoading(false);\n    });\n  }\n\n  // Function to clear the output screen\n  function clearOutput() {\n    setUserOutput(\"\");\n  }\n\n  // const [randomQuestionData, setRandomQuestionData] = useState({\n  //     question: \"\",\n  //     key: null,\n  //     usedVariables: {},\n  // });\n\n  // const [sampleSolution, setSampleSolution] = useState(\"\");\n  // const [questions, setQuestions] = useState([]);\n  // const [solutions, setSolutions] = useState([]);\n  // const [variables, setVariables] = useState([]);\n\n  // useEffect(() => {\n  // Fetch loopExerciseTemplate and variable data from the backend (MongoDB)\n  //     axios.get(\"http://localhost:3000/api/questions-and-variables\")\n  //     .then((response) => {\n  //         const { questions, variables } = response.data;\n  //         setQuestions(questions);\n  //         setVariables(variables);\n  //         generateRandomQuestion(questions, variables);\n  //     })\n  //     .catch((error) => {\n  //         console.error(\"Error fetching data from the server:\", error);\n  //     });\n\n  //     axios.get(\"http://localhost:5000/api/solutions\")\n  //         .then((response) => {\n  //             setSolutions(response.data);\n  //             handleGenerateSampleSolution();\n  //         })\n  //         .catch((error) => {\n  //             console.error(\"Error fetching solution data from the server:\", error);\n  //         });\n\n  // }, [exerciseType]);\n\n  // const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\n\n  // const generateRandomQuestion = () => {\n  //     const randomTemplate = getRandomItem(loopExerciseTemplate.questions);\n  //     const usedVariables = {};\n\n  //     let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\n  //         if (variables.hasOwnProperty(variable)) {\n  //             let variableValue = getRandomItem(variables[variable]);\n  //             usedVariables[variable] = variableValue;\n  //             return variableValue;\n  //         }\n  //         return match;\n  //     });\n\n  //     setRandomQuestionData({ question, usedVariables, key: randomTemplate.key });\n  // };\n\n  // const handleGenerateSampleSolution = () => {\n  //     const { key, usedVariables } = randomQuestionData;\n  //     const matchingSolution = solutions.find((solution) => solution.key === key);\n\n  //     if (matchingSolution) {\n  //         let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n  //             if (usedVariables.hasOwnProperty(variable)) {\n  //                 return usedVariables[variable];\n  //             }\n  //             return match;\n  //         });\n\n  //         setSampleSolution(solutionCode);\n  //     } else {\n  //         setSampleSolution(\"Sample solution not available for this question.\");\n  //     }\n  // }\n\n  const [randomQuestionData, setRandomQuestionData] = useState(null);\n  const [sampleSolution, setSampleSolution] = useState(\"\");\n  useEffect(() => {\n    // Fetch loopExerciseTemplate data\n    const initialQuestionData = generateRandomQuestion();\n    setRandomQuestionData(generateRandomQuestion());\n    handleGenerateSampleSolution();\n  }, []); // Run this effect only once when the component mounts\n\n  const handleNextQuestionClick = () => {\n    const newRandomQuestionData = generateRandomQuestion();\n    setRandomQuestionData(newRandomQuestionData);\n    handleGenerateSampleSolution(newRandomQuestionData);\n  };\n  const getRandomItem = array => array[Math.floor(Math.random() * array.length)];\n  const generateRandomQuestion = () => {\n    const randomTemplate = getRandomItem(loopExerciseTemplate.questions);\n    const usedVariables = {};\n    let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\n      var _loopExerciseTemplate;\n      if ((_loopExerciseTemplate = loopExerciseTemplate.variables) !== null && _loopExerciseTemplate !== void 0 && _loopExerciseTemplate.hasOwnProperty(variable)) {\n        let variableValue = getRandomItem(loopExerciseTemplate.variables[variable]);\n        usedVariables[variable] = variableValue;\n        return variableValue;\n      }\n      return match;\n    });\n    return {\n      question,\n      usedVariables,\n      key: randomTemplate.key\n    };\n  };\n  const handleGenerateSampleSolution = questionData => {\n    if (questionData && questionData.key) {\n      const {\n        key,\n        usedVariables\n      } = questionData;\n      const matchingSolution = loopExerciseTemplate.solutions.find(solution => solution.key === key);\n      if (matchingSolution) {\n        let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n          if (usedVariables.hasOwnProperty(variable)) {\n            return usedVariables[variable];\n          }\n          return match;\n        });\n        setSampleSolution(solutionCode);\n      } else {\n        setSampleSolution(\"Sample solution not available for this question.\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codingScreenBody\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Python Loops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [randomQuestionData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: randomQuestionData.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NavBarCoding, {\n        userLang: userLang,\n        setUserLang: setUserLang,\n        userTheme: userTheme,\n        setUserTheme: setUserTheme,\n        fontSize: fontSize,\n        setFontSize: setFontSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-output-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code-editor\",\n          id: \"editor\",\n          children: /*#__PURE__*/_jsxDEV(AceEditor, {\n            mode: userLang,\n            theme: userTheme,\n            name: \"my-editor\",\n            width: \"100%\",\n            height: \"800px\",\n            fontSize: `${fontSize}px`,\n            editorProps: {\n              $blockScrolling: true\n            },\n            showPrintMargin: true,\n            showGutter: true,\n            highlightActiveLine: true,\n            onChange: handleChange,\n            setOptions: {\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              enableSnippets: true,\n              showLineNumbers: true,\n              tabSize: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-output-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"input:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-box\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"code-input\",\n              onChange: e => setUserInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"output:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-box\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./images/loading.gif\",\n              alt: \"loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"output-box\",\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              style: {\n                color: \"white\"\n              },\n              children: userOutput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(NextSampleButton, {\n          classNameNext: \"nextButton\",\n          classNameSample: \"sampleSolutionButton\",\n          onClickQuestion: handleNextQuestionClick,\n          onClickSmaple: handleGenerateSampleSolution\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"codeButton\",\n          onClick: () => compile(),\n          children: \"Run\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clearButton\",\n          onClick: () => {\n            clearOutput();\n          },\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n}\n_s(CodingScreen, \"rCNVpQdYjr3e4zmDKC3kuBdOYaE=\");\n_c = CodingScreen;\nexport default CodingScreen;\nvar _c;\n$RefreshReg$(_c, \"CodingScreen\");","map":{"version":3,"names":["React","useEffect","useParams","NavBar","NavBarCoding","NextSampleButton","AceEditor","useState","loopExerciseTemplate","axios","jsxDEV","_jsxDEV","CodingScreen","_s","userCode","setUserCode","userLang","setUserLang","userTheme","setUserTheme","fontSize","setFontSize","userInput","setUserInput","userOutput","setUserOutput","loading","setLoading","handleChange","value","compile","post","code","language","input","then","res","data","output","clearOutput","randomQuestionData","setRandomQuestionData","sampleSolution","setSampleSolution","initialQuestionData","generateRandomQuestion","handleGenerateSampleSolution","handleNextQuestionClick","newRandomQuestionData","getRandomItem","array","Math","floor","random","length","randomTemplate","questions","usedVariables","question","text","replace","match","variable","_loopExerciseTemplate","variables","hasOwnProperty","variableValue","key","questionData","matchingSolution","solutions","find","solution","solutionCode","template","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","mode","theme","name","width","height","editorProps","$blockScrolling","showPrintMargin","showGutter","highlightActiveLine","onChange","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","e","target","src","alt","style","color","classNameNext","classNameSample","onClickQuestion","onClickSmaple","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rushi/OneDrive/Desktop/Project/my-app/src/components/CodingScreen.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport NavBarCoding from \"./NavBarCoding\";\r\nimport NextSampleButton from \"./NextSampleButton\";\r\nimport AceEditor from 'react-ace';\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/tomorrow';\r\nimport { useState } from \"react\";\r\nimport loopExerciseTemplate from \"./Templates\";\r\nimport axios from \"axios\";\r\n\r\nfunction CodingScreen() {\r\n    // const { exerciseType } = useParams();\r\n\r\n    const [userCode, setUserCode] = useState(``);\r\n\r\n    const [userLang, setUserLang] = useState(\"python\");\r\n\r\n    const [userTheme, setUserTheme] = useState(\"github\");\r\n\r\n    const [fontSize, setFontSize] = useState(20);\r\n\r\n    const [userInput, setUserInput] = useState(\"\");\r\n\r\n    const [userOutput, setUserOutput] = useState(\"\");\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n\r\n    function handleChange(value) {\r\n        setUserCode(value)\r\n    }\r\n\r\n\r\n    function compile() {\r\n        setLoading(true);\r\n        if (userCode === ``) {\r\n            return\r\n        }\r\n\r\n        // Post request to compile endpoint\r\n        axios.post(`http://localhost:3000/compile`, {\r\n            code: userCode,\r\n            language: userLang,\r\n            input: userInput\r\n        }).then((res) => {\r\n            setUserOutput(res.data.output);\r\n\r\n        }).then(() => {\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    // Function to clear the output screen\r\n    function clearOutput() {\r\n        setUserOutput(\"\");\r\n    }\r\n\r\n    // const [randomQuestionData, setRandomQuestionData] = useState({\r\n    //     question: \"\",\r\n    //     key: null,\r\n    //     usedVariables: {},\r\n    // });\r\n\r\n    // const [sampleSolution, setSampleSolution] = useState(\"\");\r\n    // const [questions, setQuestions] = useState([]);\r\n    // const [solutions, setSolutions] = useState([]);\r\n    // const [variables, setVariables] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    // Fetch loopExerciseTemplate and variable data from the backend (MongoDB)\r\n    //     axios.get(\"http://localhost:3000/api/questions-and-variables\")\r\n    //     .then((response) => {\r\n    //         const { questions, variables } = response.data;\r\n    //         setQuestions(questions);\r\n    //         setVariables(variables);\r\n    //         generateRandomQuestion(questions, variables);\r\n    //     })\r\n    //     .catch((error) => {\r\n    //         console.error(\"Error fetching data from the server:\", error);\r\n    //     });\r\n\r\n\r\n    //     axios.get(\"http://localhost:5000/api/solutions\")\r\n    //         .then((response) => {\r\n    //             setSolutions(response.data);\r\n    //             handleGenerateSampleSolution();\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.error(\"Error fetching solution data from the server:\", error);\r\n    //         });\r\n\r\n\r\n    // }, [exerciseType]);\r\n\r\n    // const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    // const generateRandomQuestion = () => {\r\n    //     const randomTemplate = getRandomItem(loopExerciseTemplate.questions);\r\n    //     const usedVariables = {};\r\n\r\n    //     let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\r\n    //         if (variables.hasOwnProperty(variable)) {\r\n    //             let variableValue = getRandomItem(variables[variable]);\r\n    //             usedVariables[variable] = variableValue;\r\n    //             return variableValue;\r\n    //         }\r\n    //         return match;\r\n    //     });\r\n\r\n    //     setRandomQuestionData({ question, usedVariables, key: randomTemplate.key });\r\n    // };\r\n\r\n\r\n    // const handleGenerateSampleSolution = () => {\r\n    //     const { key, usedVariables } = randomQuestionData;\r\n    //     const matchingSolution = solutions.find((solution) => solution.key === key);\r\n\r\n    //     if (matchingSolution) {\r\n    //         let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n    //             if (usedVariables.hasOwnProperty(variable)) {\r\n    //                 return usedVariables[variable];\r\n    //             }\r\n    //             return match;\r\n    //         });\r\n\r\n    //         setSampleSolution(solutionCode);\r\n    //     } else {\r\n    //         setSampleSolution(\"Sample solution not available for this question.\");\r\n    //     }\r\n    // }\r\n\r\n    const [randomQuestionData, setRandomQuestionData] = useState(null);\r\n    const [sampleSolution, setSampleSolution] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        // Fetch loopExerciseTemplate data\r\n        const initialQuestionData = generateRandomQuestion();\r\n        setRandomQuestionData(generateRandomQuestion());\r\n        handleGenerateSampleSolution();\r\n    }, []); // Run this effect only once when the component mounts\r\n    \r\n    const handleNextQuestionClick = () => {\r\n        const newRandomQuestionData = generateRandomQuestion();\r\n        setRandomQuestionData(newRandomQuestionData);\r\n        handleGenerateSampleSolution(newRandomQuestionData);\r\n      };\r\n\r\n    const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    const generateRandomQuestion = () => {\r\n        const randomTemplate = getRandomItem(loopExerciseTemplate.questions);\r\n        const usedVariables = {};\r\n\r\n        let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\r\n            if (loopExerciseTemplate.variables?.hasOwnProperty(variable)) {\r\n              let variableValue = getRandomItem(loopExerciseTemplate.variables[variable]);\r\n              usedVariables[variable] = variableValue;\r\n              return variableValue;\r\n            }\r\n            return match;\r\n          });\r\n\r\n        return { question, usedVariables, key: randomTemplate.key };\r\n        \r\n    };\r\n\r\n\r\n    const handleGenerateSampleSolution = (questionData) => {\r\n        if (questionData && questionData.key) {\r\n            const { key, usedVariables } = questionData;\r\n            const matchingSolution = loopExerciseTemplate.solutions.find((solution) => solution.key === key);\r\n\r\n            if (matchingSolution) {\r\n                let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n                    if (usedVariables.hasOwnProperty(variable)) {\r\n                        return usedVariables[variable];\r\n                    }\r\n                    return match;\r\n                });\r\n\r\n                setSampleSolution(solutionCode);\r\n            } else {\r\n                setSampleSolution(\"Sample solution not available for this question.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"codingScreenBody\">\r\n            <NavBar />\r\n            <div className=\"header\">\r\n                <h1>Python Loops</h1>\r\n            </div>\r\n            <div className=\"container\">\r\n                {randomQuestionData && (\r\n                    <div className=\"question\">\r\n                        <h2>{randomQuestionData.question}</h2>\r\n                    </div>\r\n                )}\r\n                <NavBarCoding\r\n                    userLang={userLang} setUserLang={setUserLang}\r\n                    userTheme={userTheme} setUserTheme={setUserTheme}\r\n                    fontSize={fontSize} setFontSize={setFontSize}\r\n                />\r\n\r\n                <div className=\"editor-output-container\">\r\n                    <div className=\"code-editor\" id=\"editor\">\r\n                        <AceEditor\r\n                            mode={userLang}\r\n                            theme={userTheme}\r\n                            name=\"my-editor\"\r\n                            width=\"100%\"\r\n                            height=\"800px\"\r\n                            fontSize={`${fontSize}px`}\r\n                            editorProps={{ $blockScrolling: true }}\r\n                            showPrintMargin={true}\r\n                            showGutter={true}\r\n                            highlightActiveLine={true}\r\n                            onChange={handleChange}\r\n                            setOptions={{\r\n                                enableBasicAutocompletion: true,\r\n                                enableLiveAutocompletion: true,\r\n                                enableSnippets: true,\r\n                                showLineNumbers: true,\r\n                                tabSize: 2,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-output-area\">\r\n                        <h4>input:</h4>\r\n                        <div className=\"input-box\">\r\n                            <textarea id=\"code-input\"\r\n                                onChange={(e) => setUserInput(e.target.value)}>\r\n                            </textarea>\r\n\r\n                        </div>\r\n                        <h4>output:</h4>\r\n                        {loading ? (\r\n                            <div className=\"spinner-box\">\r\n                                <img src=\"./images/loading.gif\" alt=\"loading...\" />\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"output-box\">\r\n                                <pre style={{ color: \"white\" }}>{userOutput}</pre>\r\n\r\n                            </div>\r\n                        )}\r\n                        <div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"button-container\">\r\n                    <NextSampleButton\r\n                        classNameNext=\"nextButton\"\r\n                        classNameSample=\"sampleSolutionButton\"\r\n                        onClickQuestion={handleNextQuestionClick}\r\n                        onClickSmaple={handleGenerateSampleSolution}\r\n                    />\r\n\r\n                    <button type=\"submit\" className=\"codeButton\" onClick={() => compile()}>Run</button>\r\n                    <button className=\"clearButton\" onClick={() => { clearOutput() }}>Clear</button>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CodingScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}