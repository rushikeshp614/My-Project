{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rushi\\\\OneDrive\\\\Desktop\\\\Project\\\\my-app\\\\src\\\\components\\\\CodingScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport NavBarCoding from \"./NavBarCoding\";\nimport NextSampleButton from \"./NextSampleButton\";\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\nimport { useState } from \"react\";\n// import exerciseData from \"./Templates\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodingScreen() {\n  _s();\n  // const { exerciseType } = useParams();\n  const location = useLocation();\n  const {\n    exerciseData\n  } = location.state;\n  const [userCode, setUserCode] = useState(``);\n  const [userLang, setUserLang] = useState(\"python\");\n  const [userTheme, setUserTheme] = useState(\"cobalt\");\n  const [fontSize, setFontSize] = useState(20);\n  const [userInput, setUserInput] = useState(\"\");\n  const [userOutput, setUserOutput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  function handleChange(value) {\n    setUserCode(value);\n  }\n  function compile() {\n    setLoading(true);\n    if (userCode === ``) {\n      return;\n    }\n\n    // Post request to compile endpoint\n    axios.post(`http://localhost:3000/compile`, {\n      code: userCode,\n      language: userLang,\n      input: userInput\n    }).then(res => {\n      setUserOutput(res.data.output);\n    }).then(() => {\n      setLoading(false);\n    });\n  }\n\n  // Function to clear the output screen\n  function clearOutput() {\n    setUserOutput(\"\");\n  }\n\n  // const [randomQuestionData, setRandomQuestionData] = useState({\n  //     question: \"\",\n  //     key: null,\n  //     usedVariables: {},\n  // });\n\n  // const [sampleSolution, setSampleSolution] = useState(\"\");\n  // const [questions, setQuestions] = useState([]);\n  // const [solutions, setSolutions] = useState([]);\n  // const [variables, setVariables] = useState([]);\n\n  // useEffect(() => {\n  // Fetch exerciseData and variable data from the backend (MongoDB)\n  //     axios.get(\"http://localhost:3000/api/questions-and-variables\")\n  //     .then((response) => {\n  //         const { questions, variables } = response.data;\n  //         setQuestions(questions);\n  //         setVariables(variables);\n  //         generateRandomQuestion(questions, variables);\n  //     })\n  //     .catch((error) => {\n  //         console.error(\"Error fetching data from the server:\", error);\n  //     });\n\n  //     axios.get(\"http://localhost:5000/api/solutions\")\n  //         .then((response) => {\n  //             setSolutions(response.data);\n  //             handleGenerateSampleSolution();\n  //         })\n  //         .catch((error) => {\n  //             console.error(\"Error fetching solution data from the server:\", error);\n  //         });\n\n  // }, [exerciseType]);\n\n  // const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\n\n  // const generateRandomQuestion = () => {\n  //     const randomTemplate = getRandomItem(exerciseData.questions);\n  //     const usedVariables = {};\n\n  //     let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\n  //         if (variables.hasOwnProperty(variable)) {\n  //             let variableValue = getRandomItem(variables[variable]);\n  //             usedVariables[variable] = variableValue;\n  //             return variableValue;\n  //         }\n  //         return match;\n  //     });\n\n  //     setRandomQuestionData({ question, usedVariables, key: randomTemplate.key });\n  // };\n\n  // const handleGenerateSampleSolution = () => {\n  //     const { key, usedVariables } = randomQuestionData;\n  //     const matchingSolution = solutions.find((solution) => solution.key === key);\n\n  //     if (matchingSolution) {\n  //         let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n  //             if (usedVariables.hasOwnProperty(variable)) {\n  //                 return usedVariables[variable];\n  //             }\n  //             return match;\n  //         });\n\n  //         setSampleSolution(solutionCode);\n  //     } else {\n  //         setSampleSolution(\"Sample solution not available for this question.\");\n  //     }\n  // }\n\n  const [randomQuestionData, setRandomQuestionData] = useState(null);\n  const [sampleSolution, setSampleSolution] = useState(\"\");\n\n  // useEffect(() => {\n  //     // Fetch exerciseData data\n  //     const initialQuestionData = generateRandomQuestion();\n  //     setRandomQuestionData(generateRandomQuestion());\n  //     handleGenerateSampleSolution();\n  // }, []); // Run this effect only once when the component mounts\n  useEffect(() => {\n    console.log(exerciseData);\n    // Fetch exerciseData data\n    if (exerciseData) {\n      const initialQuestionData = generateRandomQuestion();\n      setRandomQuestionData(initialQuestionData);\n      handleGenerateSampleSolution(initialQuestionData);\n    }\n  }, []);\n  const handleNextQuestionClick = () => {\n    const newRandomQuestionData = generateRandomQuestion(exerciseData);\n    setRandomQuestionData(newRandomQuestionData);\n  };\n  const getRandomItem = array => array[Math.floor(Math.random() * array.length)];\n  const generateRandomQuestion = () => {\n    // const randomTemplate = getRandomItem(exerciseData.questions);\n    // const usedVariables = {};\n    // console.log(\"exerciseData variables:\", exerciseData.variables);\n\n    // let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\n    //     console.log(\"Matching variable:\", variable);\n    //     if (exerciseData.variables && exerciseData.variables.hasOwnProperty(variable)) {\n    //       const variableArray = exerciseData.variables[variable];\n    //       if (Array.isArray(variableArray) && variableArray.length > 0) {\n    //         const variableValue = getRandomItem(variableArray);\n    //         usedVariables[variable] = variableValue;\n    //         return ` ${variableValue} `;\n    //       }\n    //     }\n    //     return match;\n    //   });\n\n    //   console.log(\"Used variables:\", usedVariables);\n\n    //   return { question, usedVariables, key: randomTemplate.key };\n    // };\n    if (Array.isArray(exerciseData) && exerciseData.length > 0) {\n      const randomTemplateData = getRandomItem(exerciseData); // Get a random exercise template from the array\n      // const randomTemplate = getRandomItem(randomTemplateData.questions); // Get a random question from the selected exercise template\n      const randomTemplate = randomTemplateData.questions;\n      const usedVariables = {};\n\n      // Replace variables in the question\n      let question = randomTemplate[0].text.replace(/{(\\w+)}/g, (match, variable) => {\n        if (variable === 'number') {\n          // For {number}, generate a random number between 1 and 100\n          const randomNumber = Math.floor(Math.random() * 100) + 1;\n          usedVariables[variable] = randomNumber;\n          return ` ${randomNumber} `;\n        } else if (variable === 'startno') {\n          // For {number}, generate a random number between 1 and 50\n          const randomNumber = Math.floor(Math.random() * 50) + 1;\n          usedVariables[variable] = randomNumber;\n          return ` ${randomNumber} `;\n        } else if (variable === 'endno') {\n          // For {number}, generate a random number between 51 and 100\n          const randomNumber = Math.floor(Math.random() * 50) + 51;\n          usedVariables[variable] = randomNumber;\n          return ` ${randomNumber} `;\n        } else if (variable === 'number2') {\n          // For {number}, generate a random number between 100 and 500\n          const randomNumber = Math.floor(Math.random() * 401) + 100;\n          usedVariables[variable] = randomNumber;\n          return ` ${randomNumber} `;\n        }\n        if (randomTemplateData.variables && randomTemplateData.variables.hasOwnProperty(variable)) {\n          const variableArray = randomTemplateData.variables[variable];\n          if (Array.isArray(variableArray) && variableArray.length > 0) {\n            const variableValue = getRandomItem(variableArray);\n            usedVariables[variable] = variableValue;\n            return ` ${variableValue} `;\n          }\n        }\n        return match;\n      });\n      console.log(\"Used variables:\", usedVariables);\n      console.log(question);\n      return {\n        question,\n        usedVariables,\n        key: randomTemplate.key\n      };\n    } else {\n      console.error(\"exerciseData is not an array or is empty\");\n      return null;\n    }\n  };\n\n  // const handleGenerateSampleSolution = (questionData) => {\n  //     if (questionData && questionData.key) {\n  //         const { key, usedVariables } = questionData;\n  //         const matchingSolution = exerciseData.solutions.find((solution) => solution.key === key);\n\n  //         if (matchingSolution) {\n  //             let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n  //                 if (usedVariables.hasOwnProperty(variable)) {\n  //                     return usedVariables[variable];\n  //                 }\n  //                 return match;\n  //             });\n\n  //             setSampleSolution(solutionCode);\n  //         } else {\n  //             setSampleSolution(\"Sample solution not available for this question.\");\n  //         }\n  //     }\n  // };\n  const handleGenerateSampleSolution = questionData => {\n    if (questionData && questionData.key && Array.isArray(exerciseData)) {\n      const matchingExercise = exerciseData.find(exercise => exercise.questions.some(question => question.key === questionData.key));\n      if (matchingExercise && matchingExercise.solutions) {\n        const matchingSolution = matchingExercise.solutions.find(solution => solution.key === questionData.key);\n        if (matchingSolution) {\n          let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n            if (questionData.usedVariables.hasOwnProperty(variable)) {\n              return questionData.usedVariables[variable];\n            }\n            return match;\n          });\n          setSampleSolution(solutionCode);\n          return;\n        }\n      }\n    }\n    setSampleSolution(\"Sample solution not available for this question.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codingScreenBody\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Python Loops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [randomQuestionData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: randomQuestionData.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavBarCoding, {\n        userLang: userLang,\n        setUserLang: setUserLang,\n        userTheme: userTheme,\n        setUserTheme: setUserTheme,\n        fontSize: fontSize,\n        setFontSize: setFontSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-output-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code-editor\",\n          id: \"editor\",\n          children: /*#__PURE__*/_jsxDEV(AceEditor, {\n            mode: userLang,\n            theme: userTheme,\n            name: \"my-editor\",\n            width: \"100%\",\n            height: \"800px\",\n            fontSize: `${fontSize}px`,\n            editorProps: {\n              $blockScrolling: true\n            },\n            showPrintMargin: true,\n            showGutter: true,\n            highlightActiveLine: true,\n            onChange: handleChange,\n            setOptions: {\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              enableSnippets: true,\n              showLineNumbers: true,\n              tabSize: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-output-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"input:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-box\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"code-input\",\n              onChange: e => setUserInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"output:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 21\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-box\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./images/loading.gif\",\n              alt: \"loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"output-box\",\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              style: {\n                color: \"white\"\n              },\n              children: userOutput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(NextSampleButton, {\n          classNameNext: \"nextButton\",\n          classNameSample: \"sampleSolutionButton\",\n          onClickQuestion: handleNextQuestionClick,\n          onClickSmaple: handleGenerateSampleSolution\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"codeButton\",\n          onClick: () => compile(),\n          children: \"Run\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clearButton\",\n          onClick: () => {\n            clearOutput();\n          },\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n}\n_s(CodingScreen, \"HkFSL6wEbu0WIWKfK8le8Kxxn2U=\", false, function () {\n  return [useLocation];\n});\n_c = CodingScreen;\nexport default CodingScreen;\nvar _c;\n$RefreshReg$(_c, \"CodingScreen\");","map":{"version":3,"names":["React","useEffect","useParams","useLocation","NavBar","NavBarCoding","NextSampleButton","AceEditor","useState","axios","jsxDEV","_jsxDEV","CodingScreen","_s","location","exerciseData","state","userCode","setUserCode","userLang","setUserLang","userTheme","setUserTheme","fontSize","setFontSize","userInput","setUserInput","userOutput","setUserOutput","loading","setLoading","handleChange","value","compile","post","code","language","input","then","res","data","output","clearOutput","randomQuestionData","setRandomQuestionData","sampleSolution","setSampleSolution","console","log","initialQuestionData","generateRandomQuestion","handleGenerateSampleSolution","handleNextQuestionClick","newRandomQuestionData","getRandomItem","array","Math","floor","random","length","Array","isArray","randomTemplateData","randomTemplate","questions","usedVariables","question","text","replace","match","variable","randomNumber","variables","hasOwnProperty","variableArray","variableValue","key","error","questionData","matchingExercise","find","exercise","some","solutions","matchingSolution","solution","solutionCode","template","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","mode","theme","name","width","height","editorProps","$blockScrolling","showPrintMargin","showGutter","highlightActiveLine","onChange","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","e","target","src","alt","style","color","classNameNext","classNameSample","onClickQuestion","onClickSmaple","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rushi/OneDrive/Desktop/Project/my-app/src/components/CodingScreen.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport NavBarCoding from \"./NavBarCoding\";\r\nimport NextSampleButton from \"./NextSampleButton\";\r\nimport AceEditor from 'react-ace';\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/tomorrow';\r\nimport { useState } from \"react\";\r\n// import exerciseData from \"./Templates\";\r\nimport axios from \"axios\";\r\n\r\nfunction CodingScreen() {\r\n    // const { exerciseType } = useParams();\r\n    const location = useLocation();\r\n    const { exerciseData } = location.state;\r\n\r\n\r\n    const [userCode, setUserCode] = useState(``);\r\n\r\n    const [userLang, setUserLang] = useState(\"python\");\r\n\r\n    const [userTheme, setUserTheme] = useState(\"cobalt\");\r\n\r\n    const [fontSize, setFontSize] = useState(20);\r\n\r\n    const [userInput, setUserInput] = useState(\"\");\r\n\r\n    const [userOutput, setUserOutput] = useState(\"\");\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n    function handleChange(value) {\r\n        setUserCode(value)\r\n    }\r\n\r\n\r\n    function compile() {\r\n        setLoading(true);\r\n        if (userCode === ``) {\r\n            return\r\n        }\r\n\r\n        // Post request to compile endpoint\r\n        axios.post(`http://localhost:3000/compile`, {\r\n            code: userCode,\r\n            language: userLang,\r\n            input: userInput\r\n        }).then((res) => {\r\n            setUserOutput(res.data.output);\r\n\r\n        }).then(() => {\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    // Function to clear the output screen\r\n    function clearOutput() {\r\n        setUserOutput(\"\");\r\n    }\r\n\r\n    // const [randomQuestionData, setRandomQuestionData] = useState({\r\n    //     question: \"\",\r\n    //     key: null,\r\n    //     usedVariables: {},\r\n    // });\r\n\r\n    // const [sampleSolution, setSampleSolution] = useState(\"\");\r\n    // const [questions, setQuestions] = useState([]);\r\n    // const [solutions, setSolutions] = useState([]);\r\n    // const [variables, setVariables] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    // Fetch exerciseData and variable data from the backend (MongoDB)\r\n    //     axios.get(\"http://localhost:3000/api/questions-and-variables\")\r\n    //     .then((response) => {\r\n    //         const { questions, variables } = response.data;\r\n    //         setQuestions(questions);\r\n    //         setVariables(variables);\r\n    //         generateRandomQuestion(questions, variables);\r\n    //     })\r\n    //     .catch((error) => {\r\n    //         console.error(\"Error fetching data from the server:\", error);\r\n    //     });\r\n\r\n\r\n    //     axios.get(\"http://localhost:5000/api/solutions\")\r\n    //         .then((response) => {\r\n    //             setSolutions(response.data);\r\n    //             handleGenerateSampleSolution();\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.error(\"Error fetching solution data from the server:\", error);\r\n    //         });\r\n\r\n\r\n    // }, [exerciseType]);\r\n\r\n    // const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    // const generateRandomQuestion = () => {\r\n    //     const randomTemplate = getRandomItem(exerciseData.questions);\r\n    //     const usedVariables = {};\r\n\r\n    //     let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\r\n    //         if (variables.hasOwnProperty(variable)) {\r\n    //             let variableValue = getRandomItem(variables[variable]);\r\n    //             usedVariables[variable] = variableValue;\r\n    //             return variableValue;\r\n    //         }\r\n    //         return match;\r\n    //     });\r\n\r\n    //     setRandomQuestionData({ question, usedVariables, key: randomTemplate.key });\r\n    // };\r\n\r\n\r\n    // const handleGenerateSampleSolution = () => {\r\n    //     const { key, usedVariables } = randomQuestionData;\r\n    //     const matchingSolution = solutions.find((solution) => solution.key === key);\r\n\r\n    //     if (matchingSolution) {\r\n    //         let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n    //             if (usedVariables.hasOwnProperty(variable)) {\r\n    //                 return usedVariables[variable];\r\n    //             }\r\n    //             return match;\r\n    //         });\r\n\r\n    //         setSampleSolution(solutionCode);\r\n    //     } else {\r\n    //         setSampleSolution(\"Sample solution not available for this question.\");\r\n    //     }\r\n    // }\r\n\r\n    const [randomQuestionData, setRandomQuestionData] = useState(null);\r\n    const [sampleSolution, setSampleSolution] = useState(\"\");\r\n\r\n\r\n    // useEffect(() => {\r\n    //     // Fetch exerciseData data\r\n    //     const initialQuestionData = generateRandomQuestion();\r\n    //     setRandomQuestionData(generateRandomQuestion());\r\n    //     handleGenerateSampleSolution();\r\n    // }, []); // Run this effect only once when the component mounts\r\n    useEffect(() => {\r\n        console.log(exerciseData)\r\n        // Fetch exerciseData data\r\n        if (exerciseData) {\r\n            const initialQuestionData = generateRandomQuestion();\r\n            setRandomQuestionData(initialQuestionData);\r\n            handleGenerateSampleSolution(initialQuestionData);\r\n        }\r\n    }, []);\r\n\r\n\r\n    const handleNextQuestionClick = () => {\r\n\r\n\r\n\r\n        const newRandomQuestionData = generateRandomQuestion(exerciseData);\r\n        setRandomQuestionData(newRandomQuestionData);\r\n\r\n\r\n    };\r\n\r\n\r\n    const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    const generateRandomQuestion = () => {\r\n        // const randomTemplate = getRandomItem(exerciseData.questions);\r\n        // const usedVariables = {};\r\n        // console.log(\"exerciseData variables:\", exerciseData.variables);\r\n\r\n        // let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\r\n        //     console.log(\"Matching variable:\", variable);\r\n        //     if (exerciseData.variables && exerciseData.variables.hasOwnProperty(variable)) {\r\n        //       const variableArray = exerciseData.variables[variable];\r\n        //       if (Array.isArray(variableArray) && variableArray.length > 0) {\r\n        //         const variableValue = getRandomItem(variableArray);\r\n        //         usedVariables[variable] = variableValue;\r\n        //         return ` ${variableValue} `;\r\n        //       }\r\n        //     }\r\n        //     return match;\r\n        //   });\r\n\r\n        //   console.log(\"Used variables:\", usedVariables);\r\n\r\n        //   return { question, usedVariables, key: randomTemplate.key };\r\n        // };\r\n        if (Array.isArray(exerciseData) && exerciseData.length > 0) {\r\n            const randomTemplateData = getRandomItem(exerciseData); // Get a random exercise template from the array\r\n            // const randomTemplate = getRandomItem(randomTemplateData.questions); // Get a random question from the selected exercise template\r\n            const randomTemplate = randomTemplateData.questions\r\n            const usedVariables = {};\r\n\r\n\r\n\r\n\r\n            // Replace variables in the question\r\n            let question = randomTemplate[0].text.replace(/{(\\w+)}/g, (match, variable) => {\r\n\r\n\r\n\r\n                if (variable === 'number') {\r\n                    // For {number}, generate a random number between 1 and 100\r\n                    const randomNumber = Math.floor(Math.random() * 100) + 1;\r\n                    usedVariables[variable] = randomNumber;\r\n                    return ` ${randomNumber} `;\r\n                }\r\n                else if (variable === 'startno') {\r\n                    // For {number}, generate a random number between 1 and 50\r\n                    const randomNumber = Math.floor(Math.random() * 50) + 1;\r\n                    usedVariables[variable] = randomNumber;\r\n                    return ` ${randomNumber} `;\r\n                }\r\n                else if (variable === 'endno') {\r\n                    // For {number}, generate a random number between 51 and 100\r\n                    const randomNumber = Math.floor(Math.random() * 50) + 51;\r\n                    usedVariables[variable] = randomNumber;\r\n                    return ` ${randomNumber} `;\r\n                }\r\n                else if (variable === 'number2') {\r\n                    // For {number}, generate a random number between 100 and 500\r\n                    const randomNumber = Math.floor(Math.random() * 401) + 100;\r\n                    usedVariables[variable] = randomNumber;\r\n                    return ` ${randomNumber} `;\r\n                }\r\n\r\n                if (randomTemplateData.variables && randomTemplateData.variables.hasOwnProperty(variable)) {\r\n                    const variableArray = randomTemplateData.variables[variable];\r\n                    if (Array.isArray(variableArray) && variableArray.length > 0) {\r\n                        const variableValue = getRandomItem(variableArray);\r\n                        usedVariables[variable] = variableValue;\r\n                        return ` ${variableValue} `;\r\n                    }\r\n                }\r\n                return match;\r\n            });\r\n\r\n            console.log(\"Used variables:\", usedVariables);\r\n            console.log(question);\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n        return { question, usedVariables, key: randomTemplate.key };\r\n\r\n    } else {\r\n        console.error(\"exerciseData is not an array or is empty\");\r\n        return null;\r\n}\r\n};\r\n\r\n\r\n\r\n\r\n// const handleGenerateSampleSolution = (questionData) => {\r\n//     if (questionData && questionData.key) {\r\n//         const { key, usedVariables } = questionData;\r\n//         const matchingSolution = exerciseData.solutions.find((solution) => solution.key === key);\r\n\r\n//         if (matchingSolution) {\r\n//             let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n//                 if (usedVariables.hasOwnProperty(variable)) {\r\n//                     return usedVariables[variable];\r\n//                 }\r\n//                 return match;\r\n//             });\r\n\r\n//             setSampleSolution(solutionCode);\r\n//         } else {\r\n//             setSampleSolution(\"Sample solution not available for this question.\");\r\n//         }\r\n//     }\r\n// };\r\nconst handleGenerateSampleSolution = (questionData) => {\r\n    if (questionData && questionData.key && Array.isArray(exerciseData)) {\r\n        const matchingExercise = exerciseData.find((exercise) =>\r\n            exercise.questions.some((question) => question.key === questionData.key)\r\n        );\r\n\r\n        if (matchingExercise && matchingExercise.solutions) {\r\n            const matchingSolution = matchingExercise.solutions.find(\r\n                (solution) => solution.key === questionData.key\r\n            );\r\n\r\n            if (matchingSolution) {\r\n                let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n                    if (questionData.usedVariables.hasOwnProperty(variable)) {\r\n                        return questionData.usedVariables[variable];\r\n                    }\r\n                    return match;\r\n                });\r\n\r\n                setSampleSolution(solutionCode);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    setSampleSolution(\"Sample solution not available for this question.\");\r\n};\r\n\r\nreturn (\r\n    <div className=\"codingScreenBody\">\r\n        <NavBar />\r\n        <div className=\"header\">\r\n            <h1>Python Loops</h1>\r\n        </div>\r\n        <div className=\"container\">\r\n            {randomQuestionData && (\r\n                <div className=\"question\">\r\n                    <h2>{randomQuestionData.question}</h2>\r\n                </div>\r\n            )}\r\n            <NavBarCoding\r\n                userLang={userLang} setUserLang={setUserLang}\r\n                userTheme={userTheme} setUserTheme={setUserTheme}\r\n                fontSize={fontSize} setFontSize={setFontSize}\r\n            />\r\n\r\n            <div className=\"editor-output-container\">\r\n                <div className=\"code-editor\" id=\"editor\">\r\n                    <AceEditor\r\n                        mode={userLang}\r\n                        theme={userTheme}\r\n                        name=\"my-editor\"\r\n                        width=\"100%\"\r\n                        height=\"800px\"\r\n                        fontSize={`${fontSize}px`}\r\n                        editorProps={{ $blockScrolling: true }}\r\n                        showPrintMargin={true}\r\n                        showGutter={true}\r\n                        highlightActiveLine={true}\r\n                        onChange={handleChange}\r\n                        setOptions={{\r\n                            enableBasicAutocompletion: true,\r\n                            enableLiveAutocompletion: true,\r\n                            enableSnippets: true,\r\n                            showLineNumbers: true,\r\n                            tabSize: 2,\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"input-output-area\">\r\n                    <h4>input:</h4>\r\n                    <div className=\"input-box\">\r\n                        <textarea id=\"code-input\"\r\n                            onChange={(e) => setUserInput(e.target.value)}>\r\n                        </textarea>\r\n\r\n                    </div>\r\n                    <h4>output:</h4>\r\n                    {loading ? (\r\n                        <div className=\"spinner-box\">\r\n                            <img src=\"./images/loading.gif\" alt=\"loading...\" />\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"output-box\">\r\n                            <pre style={{ color: \"white\" }}>{userOutput}</pre>\r\n\r\n                        </div>\r\n                    )}\r\n                    <div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"button-container\">\r\n                <NextSampleButton\r\n                    classNameNext=\"nextButton\"\r\n                    classNameSample=\"sampleSolutionButton\"\r\n                    onClickQuestion={handleNextQuestionClick}\r\n                    onClickSmaple={handleGenerateSampleSolution}\r\n                />\r\n\r\n                <button type=\"submit\" className=\"codeButton\" onClick={() => compile()}>Run</button>\r\n                <button className=\"clearButton\" onClick={() => { clearOutput() }}>Clear</button>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default CodingScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}