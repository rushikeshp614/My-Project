{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rushi\\\\OneDrive\\\\Desktop\\\\Project\\\\my-app\\\\src\\\\components\\\\CodingScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport NavBarCoding from \"./NavBarCoding\";\nimport NextSampleButton from \"./NextSampleButton\";\nimport AceEditor from 'react-ace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\nimport { useState } from \"react\";\n// import exerciseData from \"./Templates\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodingScreen(_ref) {\n  _s();\n  let {\n    exerciseData\n  } = _ref;\n  // const { exerciseType } = useParams();\n\n  const [userCode, setUserCode] = useState(``);\n  const [userLang, setUserLang] = useState(\"python\");\n  const [userTheme, setUserTheme] = useState(\"github\");\n  const [fontSize, setFontSize] = useState(20);\n  const [userInput, setUserInput] = useState(\"\");\n  const [userOutput, setUserOutput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  function handleChange(value) {\n    setUserCode(value);\n  }\n  function compile() {\n    setLoading(true);\n    if (userCode === ``) {\n      return;\n    }\n\n    // Post request to compile endpoint\n    axios.post(`http://localhost:3000/compile`, {\n      code: userCode,\n      language: userLang,\n      input: userInput\n    }).then(res => {\n      setUserOutput(res.data.output);\n    }).then(() => {\n      setLoading(false);\n    });\n  }\n\n  // Function to clear the output screen\n  function clearOutput() {\n    setUserOutput(\"\");\n  }\n\n  // const [randomQuestionData, setRandomQuestionData] = useState({\n  //     question: \"\",\n  //     key: null,\n  //     usedVariables: {},\n  // });\n\n  // const [sampleSolution, setSampleSolution] = useState(\"\");\n  // const [questions, setQuestions] = useState([]);\n  // const [solutions, setSolutions] = useState([]);\n  // const [variables, setVariables] = useState([]);\n\n  // useEffect(() => {\n  // Fetch exerciseData and variable data from the backend (MongoDB)\n  //     axios.get(\"http://localhost:3000/api/questions-and-variables\")\n  //     .then((response) => {\n  //         const { questions, variables } = response.data;\n  //         setQuestions(questions);\n  //         setVariables(variables);\n  //         generateRandomQuestion(questions, variables);\n  //     })\n  //     .catch((error) => {\n  //         console.error(\"Error fetching data from the server:\", error);\n  //     });\n\n  //     axios.get(\"http://localhost:5000/api/solutions\")\n  //         .then((response) => {\n  //             setSolutions(response.data);\n  //             handleGenerateSampleSolution();\n  //         })\n  //         .catch((error) => {\n  //             console.error(\"Error fetching solution data from the server:\", error);\n  //         });\n\n  // }, [exerciseType]);\n\n  // const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\n\n  // const generateRandomQuestion = () => {\n  //     const randomTemplate = getRandomItem(exerciseData.questions);\n  //     const usedVariables = {};\n\n  //     let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\n  //         if (variables.hasOwnProperty(variable)) {\n  //             let variableValue = getRandomItem(variables[variable]);\n  //             usedVariables[variable] = variableValue;\n  //             return variableValue;\n  //         }\n  //         return match;\n  //     });\n\n  //     setRandomQuestionData({ question, usedVariables, key: randomTemplate.key });\n  // };\n\n  // const handleGenerateSampleSolution = () => {\n  //     const { key, usedVariables } = randomQuestionData;\n  //     const matchingSolution = solutions.find((solution) => solution.key === key);\n\n  //     if (matchingSolution) {\n  //         let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n  //             if (usedVariables.hasOwnProperty(variable)) {\n  //                 return usedVariables[variable];\n  //             }\n  //             return match;\n  //         });\n\n  //         setSampleSolution(solutionCode);\n  //     } else {\n  //         setSampleSolution(\"Sample solution not available for this question.\");\n  //     }\n  // }\n\n  const [randomQuestionData, setRandomQuestionData] = useState(null);\n  const [sampleSolution, setSampleSolution] = useState(\"\");\n  const [exerciseName, setExerciseName] = useState(\"\");\n\n  // useEffect(() => {\n  //     // Fetch exerciseData data\n  //     const initialQuestionData = generateRandomQuestion();\n  //     setRandomQuestionData(generateRandomQuestion());\n  //     handleGenerateSampleSolution();\n  // }, []); // Run this effect only once when the component mounts\n  /*   useEffect(() => {\r\n        console.log(exerciseData)\r\n        // Fetch exerciseData data\r\n        if (exerciseData) {\r\n            const initialQuestionData = generateRandomQuestion();\r\n            setRandomQuestionData(initialQuestionData);\r\n            handleGenerateSampleSolution(initialQuestionData);\r\n        }\r\n    }); */\n  //, [exerciseData]);\n\n  const handleNextQuestionClick = exerciseData => {\n    // if (exerciseData) {\n    if (exerciseData.length > 0) {\n      const randomTemplateData = getRandomItem(exerciseData);\n      const randomTemplate = randomTemplateData.questions;\n\n      // const newRandomQuestionData = generateRandomQuestion(exerciseData);\n      setRandomQuestionData(randomTemplate);\n      //  handleGenerateSampleSolution(newRandomQuestionData);\n      const usedVariables = {};\n\n      // Replace variables in the question\n      let question = randomTemplate[0].text.replace(/{(\\w+)}/g, (match, variable) => {\n        if (randomTemplateData.variables && randomTemplateData.variables.hasOwnProperty(variable)) {\n          const variableArray = randomTemplateData.variables[variable];\n          if (Array.isArray(variableArray) && variableArray.length > 0) {\n            const variableValue = getRandomItem(variableArray);\n            usedVariables[variable] = variableValue;\n            return ` ${variableValue} `;\n          }\n        }\n        return match;\n      });\n      console.log(\"Used variables:\", usedVariables);\n      console.log(question);\n      return {\n        question,\n        usedVariables,\n        key: randomTemplate.key\n      };\n    } else {\n      console.error(\"exerciseData is not an array or is empty\");\n      return null;\n    }\n    // }\n  };\n\n  const getRandomItem = array => array[Math.floor(Math.random() * array.length)];\n  const generateRandomQuestion = () => {\n    // const randomTemplate = getRandomItem(exerciseData.questions);\n    // const usedVariables = {};\n    // console.log(\"exerciseData variables:\", exerciseData.variables);\n\n    // let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\n    //     console.log(\"Matching variable:\", variable);\n    //     if (exerciseData.variables && exerciseData.variables.hasOwnProperty(variable)) {\n    //       const variableArray = exerciseData.variables[variable];\n    //       if (Array.isArray(variableArray) && variableArray.length > 0) {\n    //         const variableValue = getRandomItem(variableArray);\n    //         usedVariables[variable] = variableValue;\n    //         return ` ${variableValue} `;\n    //       }\n    //     }\n    //     return match;\n    //   });\n\n    //   console.log(\"Used variables:\", usedVariables);\n\n    //   return { question, usedVariables, key: randomTemplate.key };\n    // };\n    if (Array.isArray(exerciseData) && exerciseData.length > 0) {\n      const randomTemplateData = getRandomItem(exerciseData); // Get a random exercise template from the array\n      // const randomTemplate = getRandomItem(randomTemplateData.questions); // Get a random question from the selected exercise template\n      const randomTemplate = randomTemplateData.questions;\n      const usedVariables = {};\n\n      // Replace variables in the question\n      let question = randomTemplate[0].text.replace(/{(\\w+)}/g, (match, variable) => {\n        if (randomTemplateData.variables && randomTemplateData.variables.hasOwnProperty(variable)) {\n          const variableArray = randomTemplateData.variables[variable];\n          if (Array.isArray(variableArray) && variableArray.length > 0) {\n            const variableValue = getRandomItem(variableArray);\n            usedVariables[variable] = variableValue;\n            return ` ${variableValue} `;\n          }\n        }\n        return match;\n      });\n      console.log(\"Used variables:\", usedVariables);\n      console.log(question);\n      return {\n        question,\n        usedVariables,\n        key: randomTemplate.key\n      };\n    } else {\n      console.error(\"exerciseData is not an array or is empty\");\n      return null;\n    }\n  };\n\n  // const handleGenerateSampleSolution = (questionData) => {\n  //     if (questionData && questionData.key) {\n  //         const { key, usedVariables } = questionData;\n  //         const matchingSolution = exerciseData.solutions.find((solution) => solution.key === key);\n\n  //         if (matchingSolution) {\n  //             let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n  //                 if (usedVariables.hasOwnProperty(variable)) {\n  //                     return usedVariables[variable];\n  //                 }\n  //                 return match;\n  //             });\n\n  //             setSampleSolution(solutionCode);\n  //         } else {\n  //             setSampleSolution(\"Sample solution not available for this question.\");\n  //         }\n  //     }\n  // };\n  const handleGenerateSampleSolution = questionData => {\n    if (questionData && questionData.key && Array.isArray(exerciseData)) {\n      const matchingExercise = exerciseData.find(exercise => exercise.questions.some(question => question.key === questionData.key));\n      if (matchingExercise && matchingExercise.solutions) {\n        const matchingSolution = matchingExercise.solutions.find(solution => solution.key === questionData.key);\n        if (matchingSolution) {\n          let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\n            if (questionData.usedVariables.hasOwnProperty(variable)) {\n              return questionData.usedVariables[variable];\n            }\n            return match;\n          });\n          setSampleSolution(solutionCode);\n          return;\n        }\n      }\n    }\n    setSampleSolution(\"Sample solution not available for this question.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"codingScreenBody\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Python Loops\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [randomQuestionData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: randomQuestionData.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(NavBarCoding, {\n        userLang: userLang,\n        setUserLang: setUserLang,\n        userTheme: userTheme,\n        setUserTheme: setUserTheme,\n        fontSize: fontSize,\n        setFontSize: setFontSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-output-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"code-editor\",\n          id: \"editor\",\n          children: /*#__PURE__*/_jsxDEV(AceEditor, {\n            mode: userLang,\n            theme: userTheme,\n            name: \"my-editor\",\n            width: \"100%\",\n            height: \"800px\",\n            fontSize: `${fontSize}px`,\n            editorProps: {\n              $blockScrolling: true\n            },\n            showPrintMargin: true,\n            showGutter: true,\n            highlightActiveLine: true,\n            onChange: handleChange,\n            setOptions: {\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              enableSnippets: true,\n              showLineNumbers: true,\n              tabSize: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-output-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"input:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-box\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"code-input\",\n              onChange: e => setUserInput(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"output:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner-box\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"./images/loading.gif\",\n              alt: \"loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"output-box\",\n            children: /*#__PURE__*/_jsxDEV(\"pre\", {\n              style: {\n                color: \"white\"\n              },\n              children: userOutput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(NextSampleButton, {\n          classNameNext: \"nextButton\",\n          classNameSample: \"sampleSolutionButton\",\n          onClickQuestion: handleNextQuestionClick,\n          onClickSmaple: handleGenerateSampleSolution\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"codeButton\",\n          onClick: () => compile(),\n          children: \"Run\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clearButton\",\n          onClick: () => {\n            clearOutput();\n          },\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 9\n  }, this);\n}\n_s(CodingScreen, \"jXrOfqFEaWP1C+bSNKAvIOe+voc=\");\n_c = CodingScreen;\nexport default CodingScreen;\nvar _c;\n$RefreshReg$(_c, \"CodingScreen\");","map":{"version":3,"names":["React","useEffect","useParams","NavBar","NavBarCoding","NextSampleButton","AceEditor","useState","axios","jsxDEV","_jsxDEV","CodingScreen","_ref","_s","exerciseData","userCode","setUserCode","userLang","setUserLang","userTheme","setUserTheme","fontSize","setFontSize","userInput","setUserInput","userOutput","setUserOutput","loading","setLoading","handleChange","value","compile","post","code","language","input","then","res","data","output","clearOutput","randomQuestionData","setRandomQuestionData","sampleSolution","setSampleSolution","exerciseName","setExerciseName","handleNextQuestionClick","length","randomTemplateData","getRandomItem","randomTemplate","questions","usedVariables","question","text","replace","match","variable","variables","hasOwnProperty","variableArray","Array","isArray","variableValue","console","log","key","error","array","Math","floor","random","generateRandomQuestion","handleGenerateSampleSolution","questionData","matchingExercise","find","exercise","some","solutions","matchingSolution","solution","solutionCode","template","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","mode","theme","name","width","height","editorProps","$blockScrolling","showPrintMargin","showGutter","highlightActiveLine","onChange","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","e","target","src","alt","style","color","classNameNext","classNameSample","onClickQuestion","onClickSmaple","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rushi/OneDrive/Desktop/Project/my-app/src/components/CodingScreen.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport NavBarCoding from \"./NavBarCoding\";\r\nimport NextSampleButton from \"./NextSampleButton\";\r\nimport AceEditor from 'react-ace';\r\nimport 'brace/mode/javascript';\r\nimport 'brace/theme/tomorrow';\r\nimport { useState } from \"react\";\r\n// import exerciseData from \"./Templates\";\r\nimport axios from \"axios\";\r\n\r\nfunction CodingScreen({ exerciseData }) {\r\n    // const { exerciseType } = useParams();\r\n\r\n    const [userCode, setUserCode] = useState(``);\r\n\r\n    const [userLang, setUserLang] = useState(\"python\");\r\n\r\n    const [userTheme, setUserTheme] = useState(\"github\");\r\n\r\n    const [fontSize, setFontSize] = useState(20);\r\n\r\n    const [userInput, setUserInput] = useState(\"\");\r\n\r\n    const [userOutput, setUserOutput] = useState(\"\");\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    \r\n\r\n\r\n\r\n    function handleChange(value) {\r\n        setUserCode(value)\r\n    }\r\n\r\n\r\n    function compile() {\r\n        setLoading(true);\r\n        if (userCode === ``) {\r\n            return\r\n        }\r\n\r\n        // Post request to compile endpoint\r\n        axios.post(`http://localhost:3000/compile`, {\r\n            code: userCode,\r\n            language: userLang,\r\n            input: userInput\r\n        }).then((res) => {\r\n            setUserOutput(res.data.output);\r\n\r\n        }).then(() => {\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    // Function to clear the output screen\r\n    function clearOutput() {\r\n        setUserOutput(\"\");\r\n    }\r\n\r\n    // const [randomQuestionData, setRandomQuestionData] = useState({\r\n    //     question: \"\",\r\n    //     key: null,\r\n    //     usedVariables: {},\r\n    // });\r\n\r\n    // const [sampleSolution, setSampleSolution] = useState(\"\");\r\n    // const [questions, setQuestions] = useState([]);\r\n    // const [solutions, setSolutions] = useState([]);\r\n    // const [variables, setVariables] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    // Fetch exerciseData and variable data from the backend (MongoDB)\r\n    //     axios.get(\"http://localhost:3000/api/questions-and-variables\")\r\n    //     .then((response) => {\r\n    //         const { questions, variables } = response.data;\r\n    //         setQuestions(questions);\r\n    //         setVariables(variables);\r\n    //         generateRandomQuestion(questions, variables);\r\n    //     })\r\n    //     .catch((error) => {\r\n    //         console.error(\"Error fetching data from the server:\", error);\r\n    //     });\r\n\r\n\r\n    //     axios.get(\"http://localhost:5000/api/solutions\")\r\n    //         .then((response) => {\r\n    //             setSolutions(response.data);\r\n    //             handleGenerateSampleSolution();\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.error(\"Error fetching solution data from the server:\", error);\r\n    //         });\r\n\r\n\r\n    // }, [exerciseType]);\r\n\r\n    // const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    // const generateRandomQuestion = () => {\r\n    //     const randomTemplate = getRandomItem(exerciseData.questions);\r\n    //     const usedVariables = {};\r\n\r\n    //     let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\r\n    //         if (variables.hasOwnProperty(variable)) {\r\n    //             let variableValue = getRandomItem(variables[variable]);\r\n    //             usedVariables[variable] = variableValue;\r\n    //             return variableValue;\r\n    //         }\r\n    //         return match;\r\n    //     });\r\n\r\n    //     setRandomQuestionData({ question, usedVariables, key: randomTemplate.key });\r\n    // };\r\n\r\n\r\n    // const handleGenerateSampleSolution = () => {\r\n    //     const { key, usedVariables } = randomQuestionData;\r\n    //     const matchingSolution = solutions.find((solution) => solution.key === key);\r\n\r\n    //     if (matchingSolution) {\r\n    //         let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n    //             if (usedVariables.hasOwnProperty(variable)) {\r\n    //                 return usedVariables[variable];\r\n    //             }\r\n    //             return match;\r\n    //         });\r\n\r\n    //         setSampleSolution(solutionCode);\r\n    //     } else {\r\n    //         setSampleSolution(\"Sample solution not available for this question.\");\r\n    //     }\r\n    // }\r\n\r\n    const [randomQuestionData, setRandomQuestionData] = useState(null);\r\n    const [sampleSolution, setSampleSolution] = useState(\"\");\r\n    const [exerciseName , setExerciseName] = useState(\"\");\r\n\r\n    // useEffect(() => {\r\n    //     // Fetch exerciseData data\r\n    //     const initialQuestionData = generateRandomQuestion();\r\n    //     setRandomQuestionData(generateRandomQuestion());\r\n    //     handleGenerateSampleSolution();\r\n    // }, []); // Run this effect only once when the component mounts\r\n  /*   useEffect(() => {\r\n        console.log(exerciseData)\r\n        // Fetch exerciseData data\r\n        if (exerciseData) {\r\n            const initialQuestionData = generateRandomQuestion();\r\n            setRandomQuestionData(initialQuestionData);\r\n            handleGenerateSampleSolution(initialQuestionData);\r\n        }\r\n    }); */\r\n    //, [exerciseData]);\r\n\r\n\r\n    const handleNextQuestionClick = (exerciseData) => {\r\n            // if (exerciseData) {\r\n            if(exerciseData.length > 0){    \r\n             const randomTemplateData = getRandomItem(exerciseData); \r\n             const randomTemplate = randomTemplateData.questions  \r\n               \r\n           // const newRandomQuestionData = generateRandomQuestion(exerciseData);\r\n            setRandomQuestionData(randomTemplate);\r\n          //  handleGenerateSampleSolution(newRandomQuestionData);\r\n          const usedVariables = {};\r\n\r\n            // Replace variables in the question\r\n            let question = randomTemplate[0].text.replace(/{(\\w+)}/g, (match, variable) => {\r\n                if (randomTemplateData.variables && randomTemplateData.variables.hasOwnProperty(variable)) {\r\n                    const variableArray = randomTemplateData.variables[variable];\r\n                    if (Array.isArray(variableArray) && variableArray.length > 0) {\r\n                        const variableValue = getRandomItem(variableArray);\r\n                        usedVariables[variable] = variableValue;\r\n                        return ` ${variableValue} `;\r\n                    }\r\n                }\r\n                return match;\r\n            });\r\n            console.log(\"Used variables:\", usedVariables);\r\n            console.log(question)\r\n\r\n            return { question, usedVariables, key: randomTemplate.key };\r\n        } else {\r\n            console.error(\"exerciseData is not an array or is empty\");\r\n            return null;\r\n        }\r\n        // }\r\n\r\n    };\r\n\r\n    const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];\r\n\r\n    const generateRandomQuestion = () => {\r\n        // const randomTemplate = getRandomItem(exerciseData.questions);\r\n        // const usedVariables = {};\r\n        // console.log(\"exerciseData variables:\", exerciseData.variables);\r\n\r\n        // let question = randomTemplate.text.replace(/{(\\w+)}/g, (match, variable) => {\r\n        //     console.log(\"Matching variable:\", variable);\r\n        //     if (exerciseData.variables && exerciseData.variables.hasOwnProperty(variable)) {\r\n        //       const variableArray = exerciseData.variables[variable];\r\n        //       if (Array.isArray(variableArray) && variableArray.length > 0) {\r\n        //         const variableValue = getRandomItem(variableArray);\r\n        //         usedVariables[variable] = variableValue;\r\n        //         return ` ${variableValue} `;\r\n        //       }\r\n        //     }\r\n        //     return match;\r\n        //   });\r\n\r\n        //   console.log(\"Used variables:\", usedVariables);\r\n\r\n        //   return { question, usedVariables, key: randomTemplate.key };\r\n        // };\r\n        if (Array.isArray(exerciseData) && exerciseData.length > 0) {\r\n            const randomTemplateData = getRandomItem(exerciseData); // Get a random exercise template from the array\r\n            // const randomTemplate = getRandomItem(randomTemplateData.questions); // Get a random question from the selected exercise template\r\n            const randomTemplate = randomTemplateData.questions\r\n            const usedVariables = {};\r\n\r\n            // Replace variables in the question\r\n            let question = randomTemplate[0].text.replace(/{(\\w+)}/g, (match, variable) => {\r\n                if (randomTemplateData.variables && randomTemplateData.variables.hasOwnProperty(variable)) {\r\n                    const variableArray = randomTemplateData.variables[variable];\r\n                    if (Array.isArray(variableArray) && variableArray.length > 0) {\r\n                        const variableValue = getRandomItem(variableArray);\r\n                        usedVariables[variable] = variableValue;\r\n                        return ` ${variableValue} `;\r\n                    }\r\n                }\r\n                return match;\r\n            });\r\n\r\n            console.log(\"Used variables:\", usedVariables);\r\n            console.log(question)\r\n\r\n            return { question, usedVariables, key: randomTemplate.key };\r\n        } else {\r\n            console.error(\"exerciseData is not an array or is empty\");\r\n            return null;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    // const handleGenerateSampleSolution = (questionData) => {\r\n    //     if (questionData && questionData.key) {\r\n    //         const { key, usedVariables } = questionData;\r\n    //         const matchingSolution = exerciseData.solutions.find((solution) => solution.key === key);\r\n\r\n    //         if (matchingSolution) {\r\n    //             let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n    //                 if (usedVariables.hasOwnProperty(variable)) {\r\n    //                     return usedVariables[variable];\r\n    //                 }\r\n    //                 return match;\r\n    //             });\r\n\r\n    //             setSampleSolution(solutionCode);\r\n    //         } else {\r\n    //             setSampleSolution(\"Sample solution not available for this question.\");\r\n    //         }\r\n    //     }\r\n    // };\r\n    const handleGenerateSampleSolution = (questionData) => {\r\n        if (questionData && questionData.key && Array.isArray(exerciseData)) {\r\n            const matchingExercise = exerciseData.find((exercise) =>\r\n                exercise.questions.some((question) => question.key === questionData.key)\r\n            );\r\n\r\n            if (matchingExercise && matchingExercise.solutions) {\r\n                const matchingSolution = matchingExercise.solutions.find(\r\n                    (solution) => solution.key === questionData.key\r\n                );\r\n\r\n                if (matchingSolution) {\r\n                    let solutionCode = matchingSolution.template.replace(/{(\\w+)}/g, (match, variable) => {\r\n                        if (questionData.usedVariables.hasOwnProperty(variable)) {\r\n                            return questionData.usedVariables[variable];\r\n                        }\r\n                        return match;\r\n                    });\r\n\r\n                    setSampleSolution(solutionCode);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        setSampleSolution(\"Sample solution not available for this question.\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"codingScreenBody\">\r\n            <NavBar />\r\n            <div className=\"header\">\r\n                <h1>Python Loops</h1>\r\n            </div>\r\n            <div className=\"container\">\r\n                {randomQuestionData && (\r\n                    <div className=\"question\">\r\n                        <h2>{randomQuestionData.question}</h2>\r\n                    </div>\r\n                )}\r\n                <NavBarCoding\r\n                    userLang={userLang} setUserLang={setUserLang}\r\n                    userTheme={userTheme} setUserTheme={setUserTheme}\r\n                    fontSize={fontSize} setFontSize={setFontSize}\r\n                />\r\n\r\n                <div className=\"editor-output-container\">\r\n                    <div className=\"code-editor\" id=\"editor\">\r\n                        <AceEditor\r\n                            mode={userLang}\r\n                            theme={userTheme}\r\n                            name=\"my-editor\"\r\n                            width=\"100%\"\r\n                            height=\"800px\"\r\n                            fontSize={`${fontSize}px`}\r\n                            editorProps={{ $blockScrolling: true }}\r\n                            showPrintMargin={true}\r\n                            showGutter={true}\r\n                            highlightActiveLine={true}\r\n                            onChange={handleChange}\r\n                            setOptions={{\r\n                                enableBasicAutocompletion: true,\r\n                                enableLiveAutocompletion: true,\r\n                                enableSnippets: true,\r\n                                showLineNumbers: true,\r\n                                tabSize: 2,\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input-output-area\">\r\n                        <h4>input:</h4>\r\n                        <div className=\"input-box\">\r\n                            <textarea id=\"code-input\"\r\n                                onChange={(e) => setUserInput(e.target.value)}>\r\n                            </textarea>\r\n\r\n                        </div>\r\n                        <h4>output:</h4>\r\n                        {loading ? (\r\n                            <div className=\"spinner-box\">\r\n                                <img src=\"./images/loading.gif\" alt=\"loading...\" />\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"output-box\">\r\n                                <pre style={{ color: \"white\" }}>{userOutput}</pre>\r\n\r\n                            </div>\r\n                        )}\r\n                        <div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"button-container\">\r\n                    <NextSampleButton\r\n                        classNameNext=\"nextButton\"\r\n                        classNameSample=\"sampleSolutionButton\"\r\n                        onClickQuestion={handleNextQuestionClick}\r\n                        onClickSmaple={handleGenerateSampleSolution}\r\n                    />\r\n\r\n                    <button type=\"submit\" className=\"codeButton\" onClick={() => compile()}>Run</button>\r\n                    <button className=\"clearButton\" onClick={() => { clearOutput() }}>Clear</button>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CodingScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}